What is Emmet?

shortcut to boiler plate which are made avaliable in built
It allows you to type shortcuts that are then expanded into full pieces of code.

Difference between a Library and Framework?
 A libary is used for the sake of providing facility/functionality  and also promotes the code resuability while a framework is a supporting structure , here we fill the structure with our own needs.
https://www.youtube.com/watch?v=LimOOe6I4eo&ab_channel=Codecademy

What is CDN? Why do we use it?
content delivery network , Inc uptime , speed , secuity from d-doc attack and reduces the time

 Why is React known as React? 
 react : Because it reacts to state change in virtul dom( A Javascript object which represent an DOM ) which evantually changes the real DOM changed entity only
 https://www.youtube.com/watch?v=N3AkSS5hXMA&ab_channel=ProgrammingwithMosh

 What is crossorigin in script tag?  
 Very Helpfull in this morden world which is based on loosely coupled microservice architure 
 preflight options call -> ( Addtional http header ) access control allow origin -> actuale call 
 https://www.youtube.com/watch?v=tcLW5d0KAYE&ab_channel=AkshaySaini

Diffrence bw react and reactDOM ? 
React is the core libary , while ReactDOM is the libary injected for the webversion of the React which give us the access to the DOM .

 What is difference between react.development.js and react.production.js files via CDN
 react production is minified in nature hence very fast and effivcient as compared to the devlopment one

What is async and defer?
  async : This refers to fetching(dowloading) the script encountered while prasing
  defer : This refers to executing the fetched script 
  https://www.youtube.com/watch?v=IrHmpdORLu8&t=246s&ab_channel=AkshaySaini

Diffrence bw class Components and functional Components ?
 Syantx , Class comp are extend from React.components while functional components are just function , class Comp ar statefull while functional component are stateless in nature , class comp have defined lifecycle method while functional componet use useeffect instead for the same 

import CDN first 

const h = React.createElement("h1" , {id: "abc" , class : 'classy'} , "hello world");

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render('h');

// In html the function inside onClick is been called like this while in react it is diffrent- 

* <button onClick="abc()"></button>

function abc(){ 
  console.log("Hello");
}

* <button onClick={() => abc()}></button>
* <Input onChange={abc} />

function abc(){
  console.log("Hello");
}

* react overrides everything which is written inside the root element and just only renders the react element <div id="root">
        
        <!-- React will override the DOM element -->

        
        <!-- All the below statement will not render and only the statement with on line 44 will render  -->
        <!-- Hack , if line 18 is visible means there exist some error and hence the react element is not been rendered -->
        <h1> Not Rendered </h1>

        <h1>Hello World</h1>

Popular Bundlers : vite , parcel , webpacks( npx create-react-app )

A bundler performs the following operations :

* HMR : Hot Module Replacement , means auto reload on any change

* File Watcher Algorithm(c++) : This keep a check on the file for any change

* Parser minifies the code

* Bundles things up

* Cleaning our code

* Super fast build Algorithm

* Image optimization

* Caching while devlopment

* Compatable with the older version of browser(BrowserList)

* Zero config Bundler 

* transitive dependies

* Compression

* Tree shaking( Removes the deadcode From the App)

* Port number is also managed by parcel 

* Browser compatibility is also dine by it 

We could build the react application either with the help of create react app or we could also use configure everything from strach this is really used when we are building a larger application and need many type of configration

Parcel dont do every thing it self instead it also takes the help of other NPM package 

(STEP-1 ): npm init :means  npm initialize and genrate a package.json
npm init -y :means  npm initialize without any question asked and genrate a package.json

main IN PACKAGE.JSON REFFERS TO THE ENTRY POINT IN OUR App which is index.html 

npm is a package manager for the core and the helper packages.

package-lock.json keeps a exact track of the current package version while the package.json keeps only the mention version of the package with tilda

Never put package-lock.json into git-ignore or else you will go into the error og it is working in my system but not on the production ,
maintain the hash as well 

<src script='./dist/index.js' type="module"> </src>

(STEP-2 ): npm install -D parcel : This is a dev depencie
npm i -D parcel : This is a dev depencie
npm install --save-dev parcel : This is also a dev depencie

caret(Used for Bug's fixes ) : (^) , tilde(Used for major version's) : (~) ===== auto-upgrade 

(STEP-3 ): npm install react react-dom
npm i react
npm i react-dom

(STEP-4 ): npx parcel index.html : here x means execute parcel with the entery file as index.html , and build an devlopment build to host it on the server

(STEP-4.1 (Optional) ):npx parcel build index.html : means build an production build to host it on the server

npx parcel index.html --https : for https server

///////////////////////////////

////////////////////////////////

.parcel-cache means space reserved by parcel for its use
dist folder keeps a faster devlopment build for our project

Anything which we could re-genrate is been put on git-ignore

browserlist ensure that our app works on the respective version as mentioned  

* git init to initalize a git repository

* JSX stands for JavaScript XML. JSX allows us to write HTML in React. JSX makes it easier to write and add HTML in React.

* JSX should not be implemented directly by browsers, but instead requires a compiler to transform/tranpiler it into ECMAScript. This is where Babel comes in.

* To make starting of the application easy using react bundler we have added start : "parcel index.html" in package.json under its scrpts key also now in the terminal we write "npm run start" which earlier use to be "npx parcel index.html"

* npx == npm run , npx parcel index.html

* shortcut : npm run start == npm start

* shortcut : npm run build

* To remove console.log addtional plugin will be needed like  : babel-plugin-transform-remove-console

* We also need to configure this which could be find in the npm page only how to do this ,
 That is make a file using .babelrc and then copy as it is on NPM website

* Each React element should always have a key in it 

* React use the help of  diffe algorithm to keep a track of the Keys

* root.render( heading ) : React element ; root.render(<Heading2/>) : React Component (functional)

* To write element inside a react component we will simply write {heading}

* <Heading2/>  == { Heading2() } same thing

* JSX is the replacemnt of react.createElement

* There is also a package.json present in node module

* There are two type of component in javascript : class based and function based component

* { Anything written inside it is been executed/rendered }

* Every Componet name starts with a capital letter

* JSX always santizes our application from potencial threats 

* Babel(A transpiler/compiler) convert JSX to react.createElement , which is the converted into an Object which is then react convert it to html to load it on the Dom

** Object mai we dont need to iterate we can diretly find if the value exist or not 

** Index is a very powerfull thing for determining change in state of a particular component in react , const [ currEle , setCurrEle ] = useState();

* whenever putting in an object state in a state function we will always put in an object inside that another object will be ther 

* npx means we gone use it only once .

* <React.Fragment></React.Fragment> OR <></> is a react component provided by React

* When multiple lines are present then after return in a functional component we need to wrap every thing in return ( ) as there exist multiple lines in it 

* static , relative , absloute , fixed , sticky .

* transform : transulate(x,y) ,
transform : rotate(45deg) ,
transition : background 3sec red 

*style="background-color:powderblue;"
 style={{backgroundColor: 'powderblue '}}


* Big websites uses config driven UI

* Optional chaining : ?.

*  useEffect(() => {

     getRestaurantInfo();

     ///// OR /////

     const fetchProduct = async () => {
        
       const data = await fetch(FETCH_MENU_URL + resId + "&submitAction=ENTER");
       const json = await data.json();
      
       setRestaurant(json.data.cards);

     }

    //////// OR ////////

async  function fetchProduct(){
        
       const data = await fetch(FETCH_MENU_URL + resId + "&submitAction=ENTER");
       const json = await data.json();
      
       setRestaurant(json.data.cards);

     }

     fetchProduct ();
     
    }, [] );

    async function getRestaurantInfo(){

       const data = await fetch(FETCH_MENU_URL + resId + "&submitAction=ENTER");
       const json = await data.json();
      
       setRestaurant(json.data.cards);
       
    }
   
* Component inside another component is called component composition

* There is a jsx element and a jsx component where element is nothing but a const head = ( <h1> Hello </h1>) and component is a functional or a class componet  

* We keep virtual dom with us for Reconciliation in react , That is to detect change bw actual and virtual dom using diff algorithm we also require a key for that as well , Whenever there is any change in prop or state re-render of the entire component take place and updation of the changed part take place as well 

* We could not provide styling to a React Fragment

* Never change the value of state variable using the setState function directly in the code itself , but instaed  change it inside the useEffect or a in onChange 

* console.log([burger , pizza ].join(" , ")) =>  burger, pizza 
* console.log([burger , pizza ].join("")) =>  burgerpizza 

* Config Driven UI : This method is been used for changing the UI on te bases of the backend UI

* Props means passing Arguments to functional component < comp a="dad" b={comment} />  

* Key is not a "Props"

* <RestaurantCard rest={restaurant[0]}  name="siddhant" />
* <RestaurantCard rest={restaurant[0]}  name="siddhant" area={restaurant[0].area } />

* export default Header;
import Header from './dcsdc';

* export const Title = () => { // Named import 

}


* In order to maintain a variable in react which changes itself we use a react variable(State varible ) as it value is been tracked by React unlike a normal variable 

import {Title} from './dcsdc'; here the name should be same as that of the exported name as here destructing is beeen used which require it to be of the same name as if we need to rename it we could do it by the given code below 

import { Title as  tit } from './dcsdc' ;

(STEP-5 ): Create a folder called src and inside that create a folder component then make all the components inside that only , inside the source folder we will also keep our constant and app.js file as well

* import Header , {Title} from './components/Header'; Here header is default one while Title is normal one

* import { Title , Header } from './components/Header'; Here Both of them are normale one

* onClick={() => filtreData()}
Here this function is only been called when it is been clicked and not when the js engine skims through the entire program 
 
* import * as obj from './components/Header' ; // This will import al things 
 
obj.header

* In default export Renaming is possible  
* BUt not possible in normale one  

* We put All the static details in the config file/constant file

* To make <input value={} onChange={(e) => changeFunc(e.target.value)} /> tag work in react it is compulsory to have an onChange prop in the tag as we need to keep a track of the changing state variable and change its value use setstate function provided by the usestate  , when we change any regular variable value in onChange the although the value get changed but it woulnt reflect on the UI as no re-render is taking place 

* Props name should be same through out the sending and reciving process  

* (STEP-6 ): Make the router using the libary react-router-dom   

* When we write any thing in the search bar(Input Tag) react rerenders the whole componenet this changes need to get refected in the search bar for that we take the help og useState and onChange method

* All the children will go into the <outlet/> according to the route

* e.target.value : It gives us the real time change in value of the input feild

* arr.filtre((res) => {
  return res.data.name.includes("abcss");`

  ALSO 

   res.data.name.includes("abcss"); Here no explicit return keyword needed as "includes" return a boolean only but apart from this a return keyword is nessaccary 

})

* When we need to mantain a variable that changes then in that case we need to make it a react variable that is a useState variable

* what/why is state ?
 When we change a state variable then in that case react would know that the value has changed has thus it need to re-render the changes in that component to refelect the change in the DOM  , while when we change a normale variable no state change takes place hence no re-render is there which result no change 

* what/why is React Hook ?
It is nothing but just a javascript function given to us by react which provid us some functionality

* Microservice arciture results in sepration of concern , all project are deployed on diffrent port but on the same domain name , some companey have diffrent domain as well

* page loads -> call API -> Fill the data ( render the page)

* page loads -> render the page with the structure only -> API -> Update the page with the data associated with that

* useEffect hook will render after every time if no dependicie array is present  but when an empty array is present then it will be called just once , when the page loads and not after every render , but when some parameter is been mentioned inside the depencie array then in that case it will change every time the value of that parameter changes 

* A render takes place whenever a state changes or the props associated to a component changes 

* A useEffect will work , when the initil page is been loaded , then after that useEffect will trigger to call the api at last and fill the datat into the rendered structure 

* Array.map(( ) => {
  return <div>
      <h1>"hello"</h1>
   </div>
}) 

* Array.map(( ) => (

  Here return is not required since here we have used ()
  <div>
      <h1>"hello"</h1>
   </div>
)) 

* After {} we should always place a js code and not a html elelment or else it will result in error 

 // empty dependency array => once after render
 // dep arry [searchText] => once after initial render + everytime after redern (my searchText changes)

 * Shimmer UI is the morden day UI;

 * return (!restaurant) ? (<Shimmer/>) : ( <h1>"Hello"</h1>) ;

 * { Here in this curly bracket we could only write expression and not a statement( which already have a value like let a = 10 is not possible) , a expression is one which boils down to numeric value }

 * never create a component inside another component 

 * We never change the value of a state variable directly but with the help of the set function as it tell react to run the reconsiliation process

* Agar context ka use kar k pure Aap mai data change kar ho simenteously then we will export a setUser function of a state variable 

 * Class Component: 
  constructor(){
  super();

 this.state ={

  val :{
  a: 2 ,
  b:3 
  }

 }
  
}

render(){

  return (

 this.setState({
  a:5
 })

OR

 this.setState({
  b:7
 })

OR

 this.setState({
  a:1
  b:10
 })

  )
}

* 

* Reconciliation happen in two phases in phases one constructor and render method is been called this phases is called the render phases and in the phases two componentDidMount is called this is called the commit phases also one initial render takes place before commit face where shimmer / some components is been loaded and in phases two updation of the DOM take place  

 * We create hooks after functional component and before return . Thats is bewteen them 

 * In Assests folder we keep all the images , while in the components folder we keep all the components and in the constants folder we keep all the static data 
   
 * npm i react-router-dom

 * Hooks start with a use keyword 

 * This is used to get error ,  
  import { useRouteError } from "react-router-dom"; 
const err = useRouteError() ;
consle.log( err.status + " : " + err.statusText)

* client side routing means we are not getting anything from the server instead we have all of it we are just loading it   , ssg , csg , ssr 

* Object.values converts list of object to a array of object
          {Object.values(restaurant?.menu?.items).map((item) => (
            <li key={item.id}>{item.name}</li>
          ))}

 * Array(10).fill("").map((e , i) => (
                <div className="shimmer-card" key={i}>

                </div>
            ))

* consitional rendering is very important when we are not getting notdefined or null , like that is the the use of ternary operator , and not opintion chaining : 

return  !restaurant?.menu ? (<Shimmer />): (<MainComponent/>)

* { isVerified && <div>hello</div>}
  This is a great mehtod when no value is required unlike the other two options 

  const a = { isVerified ? <div>hello</div> : <div>hi</div>}

  const b = { isVerified ? <div>hi</div> : null };

* formik help us to create form in react

* Modular , resuable , scalble , maintable , testable , clearnerf

* we do not update state directely instaed we take the help of setState in class component and functional component as well

* In class components first constructor is called then render is been called then componentdidmount(After firt render same like that od useEffect with([])) is been called   then componentDidUpdate( fWhen ever either the state changes or the prop changes ) is been called  

* componentDidMount mai API ki Calling hoti hai

* Parent - constructor
  Parent - render
  child - constructor
  child - render
  child - componentDidMount
  parent - componentDidMount 

*Parent Constructor
 Parent render

    First Child constructor
    First Child render
    Second Child constructor
    Second Child render

    DOM UPDATED for children

    first Child componentDidMount
    Second Child componentDid
  Parent componentDidMount

* we could make componentDidMount async but could not make callback function inside useEffect as async 

* If child  componentDidMount is async in nature then parent componetdidmount is been called first then the parent componentDidMount

* Render face -> Commit face

* componentDidUnMount will be called when we go some other page

* 
  useEffect(() => {
    getRestaurantInfo();

    return () => {
      console.log("component will unmount ")
    }
    
  }, []);

  The above return function will work when we leave that page and perform unmounting 

* Component will unmount is been used for clean-ups

* Never use useState outside a functional component 

* Utils folder mai hmm loog apne sare functions rakh tai hai jo bhi reusable hote hai like couste m hook and etc 

* modularity means we have broken down code into meaningful pieces

* We should not create a component inside another component also we should also not create a function inside a component if not must 

* If one function is present inside one single file then in that case we will use default export 

* Hook is nothing but just a function 

* 
        const handleOnline = () => {
            setIsOnline(false);
        }

        const handleOffline = () => {
            setIsOffline(true);
        }

        window.addEventListener('online', handleOnline);

         window.removeEventListener('offline', handleOffline)

* Early return should always take place before main return statement

* chuking , code spliting , dynamic bundling , lazy loading , on Demanding loading eg : instamart

const Instamart = lazy(() => import( "../componet /Instamart")) : this should present just after the import statement 

path: "/instamart",
element: (
  <Suspense fallback={<Shimmer />}>
     <Instamart />
  <Suspense />
)
   

* backgroundColor and not background-color in react 

* a UI libary bring in consistance of design , save time , and also effectent as well 

cons : Bundle size increases , loos a lot of control over the design  

*External CSS
scss 
Inline css
inline classcomponet libary - MUI , Base UI , Ant UI , Chakra UI
Styled Component
Tailwind css( Css framework )
: reusable , css on the go , less bundel size , pre build componenet  , flexible/costumsable ,    

* EARLY RETURN IS REALLY A VERY POWERFULL THING 

if( !online ){
  return {<h1> "Offline 🔴"</h1>};
}

* 

* Tailwind is build on mobile first approch that is in tailwind we need to write the code for medium and big screen diffrently 

* className="w-96"
* className=" w-[200px]" This is a dynamic parameter and called square bracket notation 

* tailwind dont follow prefix match search 

* Data on the UI is been mained with the help of state and props. State is the local variable while props is been passed from one element to another element 

* Props drilling means passing in data from one element to another continuesely  

* We could not modiefie another sibling from it s sibbling to overcome it we use liftingTheStateUp property 

* context is like a usestate for the entire application , centraly accessible 

* UI layer + Data Layer = our App

* Profiler is been used for determining how much time is been used in rendering each component 

* component in the redux tool of chrome help us in determining are the component architure is presesnt in real life 

* props are for each component while usecontext is central in nature 

* <UserContext.Consumer>{(val) => val.name }</UserContext.Consumer> This is used in class Component 

* <UserContext.Provider value={}> <UserContext.Provider/> overrided the default value of CreateContext({})

* UserContext.displayname = UserContext ;

* We use "usecontext" to avoid prop drealing

* Redux help in making code less cultered as companey to a normale context

* Redux : store , slice , dispatch an ac    tion which calls a reducer(Function) which updates the slice of the store , selector give us access to the data stored in the store / Subcribing 

* /**
 * Create Store
 *  - configureStore() - RTK
 *
 * Provide my stor to app
 *  - <Provider store = {store}> - import from react-redux
 *
 * Slice
 *  - RTK - createSlice({
 *          name: "",
 *          initialState:
 *          reducers: {
 *             addItem: (state, action)=> { state= action.payload}
 *          }
 *      })
 *    export const {addItem, removeItem} = cartSlice.actions;
 *    export default cartSlice.reducer;
 *
 * Put that Slice into Store
 *      - {
 *        reducer: {
 *             cart: cartSlice,
 *             user: userSlice
 *         }
 * }
 *
 * 

* Reducer are through function which are made to mutate the state , also they are pure function means through function which do not change data outside the function 

* const initialState = [] ;

{
  initialState : initialState 
  Or 
  initialState 
}

 * Ways we handle data in our react App using the following ways :

 -> state variable and props 

 const [ isVariable ,  setVarible ] =  useState(false);

 Now this variable "isVariable" is avaliable through out our component
FC : console.log(isVariable);

this.state = {
  isVariable : false 
}

CC : console.log(this.state.isVariable)

-> useContext :

Reffer
UserContext + profileClass.js + App.js + Header.js

UserContext.js :

import { CreateContext } from 'react';

const userContext = CreateContext({
  name : "Siddhant",
  add : " Mahendra "
})


export  default userContext ;

Header.js :

import{ UserContext } from './utils/userContext';
import useContext from 'react'


const ele = useContext(userContext);
const{ name } = ele ;

App.js :

import{ UserContext } from './utils/userContext';
import useContext from 'react'

<UserContext.Provider   value={{ user : 'prakhar' , add: 'Banglore' }}  > // This will modiefie the entire value of redux 
   
   
        <Header />

        {/* Children are aways been rendered inside outlet */}
        <Outlet />

        <Footer />


</UserContext.Provider>


-> Redux :

Reffer
store.js , cartSlice.js , App.js , RestrauntMenu 

store.js :

import { configureStore } from '@reduxjs/toolkit';
import cartSlice from "./cartSlice";

const store = configureStore({
    reducer :{
      cart : cartSlice
    }
})

export default store ;

cartSlice.js  : 

import { createSlice } from '@reduxjs/toolkit';

const cartSlice = createSlice({

  name: 'Cart',

  initialState : {
    items :[]
  },

  reducers :{

    addItem : ( state , action ) => {
      state.items.push(action.payload);
    },

    removeItem : ( state , action ) => {
      state.items.pop();
    },

    clearCart : (state , action ) => {
      state.items= [];
    }

  }

});

export const { addItem ,removeItem , clearCart } = cartSlice.actions ;

export default cartSlice.reducer ;

App.js :

import store from './util/store.js' ;
import { Provider } from 'react-redux';

<Provider store={store}>

</Provider>


Cart.js :

import { useSelector } from 'react-redux' ;
import { useDispatch } from 'react-redux' ;
import { clearCart } from '../utils/cartSlice';
import { addItem } from '../utils/cartSlice';

const cartItem = useSelector((store)=> store.cart.items );

const dispatch = useDispatch();

function add( ele ){
  dispatch( addItem(ele) );
}

function clear(){
  dispatch( clearCart() );
}

A higher order componenet is a function which takes in a existing componenet and return another componenet with some modification of the old component

const redBorderedCard = (VideoCard) => {

  return <div className="h-4 font-weight:30px ">
        <VideoCard/>
  </div>

}



useSearchParams() : It is used to find a particular attribute in an entire link 

const [ searchParams ] = useSearchParams();
console.log( searchParams.get(v));

*Object.freeze({
   
   IDLE : 'idle'.
   Non_Idle: 'no'
  ? This thing freezes any change in the object
})


* enums ({
   
   IDLE : 'idle'.
   Non_Idle: 'no'
  ? This thing freezes any change in the object
})

* ellis { aaa: b , c }

// For thunk reffer codergyan redux toolkit 


We have javascript html and css still why we need framework like react ?the reason behind it is when the number of request on the backend increses then it that case it became very difficult to get every page on every single request on server that is returning the html css and js file on every single request although may code in that meight be similar still it is been requested every single time 

A single page application appers to be multiple page but the thing is only the conet which is need to be change is been chaged on switch the pages which case is not true when the website is a multpage application 

React , angular and vue gives us a ingle page application we write our code it int and build it in return we get static files which could be deployed on the server such that on every request only the nessasry content is been changed unlike an multipage application 

React can be used to build both Single Page Application and also Part of Multi Page Application


Javascript obfuscator is been used to make javascript un understanable
build it in react and other frontend end frame work as well 


UI libary to build component 

Entry point is always the index.js file in npx create-react-app 

To write html inside of a react componet we write it in jsx , jsx is similar to html such that we can also write javascript along with it , in order to write javascript inside of it we write it inside of 
a " {} " tag .


------ 

const a = 10;
const c = 'hello;
function b(){
  return 'hi from hello';
}

export { a , c , b } ;

import { a , c , b } from './abcd/gv.js';
import { a , c , b as bc  } from './abcd/gv.js';

------- 


when we have jsx return inside of a file then we need to import react in that file as well as jsx ultimetly gets convert into it natural form which is been mentioned below :

import React from 'react' ;

                👇This is jsx
ReactDom.render(<h1>Hello</h1> , document.getElementById('root'));   👇This is convertto below one 
              👇
React.createElement("h1" , null , 'hi i am h1");
React.createElement("h1" , {className  : "header" } , 'hi i am h1");
React.createElement("h1" , {className  : "header" , id : 'rgb' } , 'hi i am h1");


Or in vi\anilla js 

const h  = document.createElement("h1");
h.innerHTML = 'hello from h1' ;

const r = document.getElementById('root');
r.appendChild(h);



*  we cannot use conditional statement ( if else ) in hooks nor in jsx instead we use ternary operator instead also for loop as well instead we use map and filtre 

* Object.keys(ele) : Return us an array of keys in that object

* {a = val ? 'hi' : 'hello '}

* {a}{isPresent ? 'hi : 'hello' } // This is possible two { } in one line 

* Ui per change nahi hota hai although value chage ho jae : Play != Play

* Props are read only in nature that is we can modifie it statically ( color = 'pink' ) but not dynamically ( whith the help of onclick )

* <div className="veiw">
                                       This is possible in jsx
    {veiws} Veiws <span>.</span> {time}
  </div>

* 


const obj = {
  name : 'sidd' , 
  val : '45' ,
  age: 89
}

<video name="siddhant" val="54" age={45} />
        OR 
<video {...obj}  />

const video = ({ name , val , age }) => {
  
  return (
      <div>{name}</div>
      <div>{val}</div>
      <div>{age}</div>
  )

};


* This is used to install exact version of depencies :  npm install --legacy-peer-deps 

__

* we can aslo pass Component as props :

App.js :-

import Styling from ',.Styling';
import Vid from './Vid' ;

const App = () => {

  return (
    ✅  <Styling comp={Vid} />
    ❌  <Styling comp={<Vid/>} /> as here Vid is been passed as an object and we want it is as string 
  )
}

export default App ;



Styling.js :-

const Styling = ({Comp}) => {

  return (
    <div className="1px solid red" >
       <Comp />
    </div>
  )
}


* src folder cannot access file outside of it self 

* Rember of children Prop 

* Any Event which is been attached on an element which is create by us , does not do any onClick or onChange property as it only work on traditonal html element and not on the creted react componenet 

* e.stopPropogation() - anti bubbling ,
  e.preventDefault() - anti default Event ,
  , {
    capture : true 
  }

* <video>  </video> === <video/>


* const [ number , setNumber ] = useState(0);


function handleClick(){
 
  //They are been executed async
 setNumber(number+1)
 setNumber(number+1)
 setNumber(number+1)
 setNumber(number+1)

 console.log(number);


 out : 
 1
 1
 1
 1

 0

}


function handleClick(){

 //They are been executed async
 setNumber(number = number+1)
 setNumber(number = number+1)
 setNumber(number = number+1)
 setNumber(number = number+1)

 console.log(number);

 out : 
 1
 2
 3
 4

 0

}
 
<button onClick={handleClick} >{number}</button>



while mutating the original array we should not modife the original one instead create a new one always  
const [ video , setVideo ] = useState(video);
setVideo([ ...videos , {
  a : 'sidd' ,
  b : '45'
}])

OR

const a  = video.map((vid) => {
   
   if(vid.id == i ){
    return {
      vid.id : newId
    }
   }
}
)

setVideo(a);


* "create-react-app" is a toolchain which help us in installing all things easily and creating a react app easily 

* pwd : present workind directory 

* npm is a package manager while npx is used to execute other javascript packages 

*

let obj = {

  title : 'Reactjs' ,
  co : 'black' ,
  channel : 'CoderGyan',
  views : 400 ,
  time :'20 min' ,

}

function App() {
  return (
    <div className="App">
   
       <Video title='Reatjs' co='black' channel='Codergyan' views={400} time='20 min'  ></Video>

       <Video title={obj.title} co={obj.co} channel={obj.channel} views={obj.views} time={obj.time} ></Video>
   
       <Video {...obj} ></Video>
       
    </div>
  );
}



export default App;



const Video = ({title , co , channel , views ,time }) => {

    const topic = 'no value here'

  return (
    <div >

      <img src="https://shorturl.at/BJKRS" />
      
      <div style={{ marginTop : '10px' , color:co }}>This is the title {title} </div>

      <div>{channel}</div>
      <div>{views} views <span>.</span>{time}</div>

    </div>
  )
}



























* TESTTING 

->  Manual TESTTING
-> Autmation TESTTING
   - selenium TESTTING(E2E Testing entire data flow on a headless browser )
-> Unit Testing( small component feature testing)
-> Integration Testing ( Testing the integrity bewteen the components )
->   


* we use jest which a javascript framework for testing 

* jest is been used by React Testing Library 

 * - Install React Testing Librabry
 * - Install Jest
 * - configure Jest
 * - Installed jest-environment-jsdom
 * - Create my first test
 * - Configure babel
 * - Wrote expect sum test
 * - gitignore coverage report


1.> npm install --save-dev @testing-library/react

2.> npm i -D jest 

3.> npx jest --init //npx means execute it once only , this commond is been used for configuring jest 

* Test driven devlopment : The test coverage is 100 percentage  upfront in test driven devlopment 

4.> npm i -D jest-environment-jsdom

5.> create first test folder " __tests__ "-> sum.test.js

" __ " : this naming convetion is also know as dunder 

6.> configure bable :  npm install --save-dev babel-jest @babel/core @babel/preset-env

JSON != javascript object

7.> Make a .bablerc file :  presets: [['@babel/preset-env', {targets: {node: 'current'}}]]

8.> npm run jest : to start testing 






// Machine Coding :- 

* Planning the application  and time managemnt is very important in machine coding round of interveiw 

* Requirment qualifiation
  - Features  ( 5min )
  - Tech-Stack( Justification ) ( 5 min )
      - redux
      - Tailwind
      - formik
      - routing
      - Bundler
      - Testing libary
      - Language
  - Planning          (5 min )
    - UI design or low level design
    - figure out pages
    - List down the components
  - 


 Step 1 : Requirment gathering

 Tech stack - 

  Data layer :
   context api , 
   redux toolkit,
   formik

  UI layer :
   Tailwind css

  Router :
   react router dom

  Bundler :
   parcel

  Testing :
   jest


Step 2 : Layout design 

Step 3 : pages design

Step 4 : componenet determination

Step 5 : npx create-react-app yt

Step 6 : Inside src create a component folder inside that folder create the various components

Step 7 : npm install react-router-dom , Enable routing in App.js

step 8 : we render everything in the App.js  which is been render in the index.js

Step 9 : npm i -D Tailwind , configure tailwind

Step 10 : while using the local image in react we have to ways to do it (weback)


Below statement is possible :

const [count, setCount] = useState(0)
<button onClick={() => setCount((count) => count + 1)}>
<button onClick={() => setCount((prev) => prev + 1)}>
  
  - <img src={require('../assests/ig.png')} />
  - import ig from '../assests/ig.png';
    <img src={ig} />
step 10 : element is element

step 11 : we need to import the index.css file in index.js in order to tailwind to work 

Step 12 : grid grid-flow-col | col-span-2

Step 13 : step up redux by installing 
npm i react-redux @redux/toolkit 

step 14 : Now step up the store 

step 15 : we can also early return by doing if( a === false ){return null}
   
step 16 : We do not export our api key

step 17 : const [ searchParam ] = useSearchParam();
          const attr = searchParam.get('v');
          console.log(attr);



Challeges assoicated with live data : 
 
 - Data layer : Fetching live data
 - UI layer : Rendering live data 

 To fetch the data we can use two things
 - Websocket ( no regular intervel , involve a handshake , bi directional  )
 - Api polling / long polling ( doesnt invlove a handshake , fixed interval , one way )


Usememo Hook is been used to memoize the heavy operation while caching 

const[ isDarkTheme , setisDarkTheme ] = useState(true);

const[ isOpen , setIsOpen ] = useState(true);

<div  className={ "bg-slate-900" + ( isOpen && "text-bold") + "underline" }  >
    
</div>

Here the value returned by prime is be stored and not been calculated on every rerender(change of the prop and state) this value is only calculated when the value of text changes

Before
const primeVal = prime();

After
const prime = Usememo(() => prime() , [text]) ;
Here it caches the result in the prime variable


UseCallBack - here we cache the function defination unlike Usememo where we cache the result of function 


* Most of the time props are read only in nature that is it couldnt be changed dynamically
although assigment to a new variable ould be performed some time 

* when we pass an component inside another component then we could access it inside the other component with the help of children component

<video><AnotheComp/></video>

function video({AnotherComp , age='42" //Default Prop }){
   
   return (
    <div>
       <Children/>
    </div>
   )
}

<Video  age={'54'}></Video> ❌
<Video  age={54}  ></Video> ✅

* spread vs destructing
 const arr = [ 1 , 3, 4, 5 ,6 , 8, 9 ];

 const [ 1 , 2,  3, 4 ] = arr ;
 [] : create an array , spread all the elelment present in arr using ...arr add 10 to that arr ;
 const b = [...arr , 10 ]

const f = [ 1 , 3, 4, 5, 6,7 ];
const g = [...f];
console.log( ...f , g  );

1 3 4 5 6 7 ,  [1, 3, 4, 5, 6, 7]

making a copy 
{ ...vid }

editing and making a copy 
{ ...vid , id : 'hi'}

making a copy 
[ ...list ]

editing and making a copy 
[ ..list , ['hi']]

 let obj = {
    time: '1 month ago',
    channel: 'Coder Dost',
    verified: true,
  }

  let ar = [ 1 , 2, 3, 4,4]

// This below one will always give error 
 console.log(...obj)
console.log({...obj})
console.log(...ar)
console.log([...ar])


json mai key and value should both be in "" 

while in object mai key hona chaiyeah but not compulsary 

we can edit in the middle of the the array with thehelpof dplice and .findIndex

