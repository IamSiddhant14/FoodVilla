What is Emmet?

shortcut to boiler plate which are made avaliable in built
It allows you to type shortcuts that are then expanded into full pieces of code.

Difference between a Library and Framework?
 A libary is used for the sake of providing facility/functionality  and also promotes the code resuability while a framework is a supporting structure , here we fill the structure with our own needs
https://www.youtube.com/watch?v=LimOOe6I4eo&ab_channel=Codecademy

What is CDN? Why do we use it?
content delivery network , Inc uptime , speed , secuity from d-doc attack and reduces the time

 Why is React known as React? 
 react : Because it reacts to state change in virtul dom which evantually changes the real DOM changed entity only
 https://www.youtube.com/watch?v=N3AkSS5hXMA&ab_channel=ProgrammingwithMosh

 What is crossorigin in script tag?
 Very Helpfull in this morden world which is based on loosely coupled microservice architure 
 https://www.youtube.com/watch?v=tcLW5d0KAYE&ab_channel=AkshaySaini

Diffrence bw react and reactDOM ?
React is the core libary , while ReactDOM is the libary injected for the webversion of the React which give us the access to the DOM .

 What is difference between react.development.js and react.production.js files via CDN
 react production is minified in nature hence very fast and effivcient as compared to the devlopment one

What is async and defer?
  async : This refers to fetching(dowloading) the script encountered while prasing
  defer : This refers to executing the fetched script 
  https://www.youtube.com/watch?v=IrHmpdORLu8&t=246s&ab_channel=AkshaySaini

  

Bundlers : vite , parcel , webpacks

A bundler do the folowing things :

* HMR : Hot Module Replacement , means auto reload on any change

* File Watcher Algorithm(c++) : This keep a check on the file for any change

* Parser minifies the code

* Bundles things up

* Cleaning our code

* Super fast build Algorithm

* Image optimization

* Caching while devlopment

* Compatable with the older version of browser(BrowserList)

* Zero config Bundler 

* transitive dependies

* Compression

* Tree shaking( Removes the deadcode From the App)

npm init :means  npm initialize and genrate a package.json
npm init -y :means  npm initialize without any question asked and genrate a package.json

npm is a package manager for the core and the helper packages.

package-lock.json keeps a exact track of the current package version while the package.json keeps only the mention version of the package with tilda

Never put package-lock.json into git-ignore or else you will go into the error og it is working in my system but not on the production ,
maintain the hash as well 


npm install -D parcel : This is a dev depencie
npm i -D parcel : This is a dev depencie
npm install --save-dev parcel : This is also a dev depencie

caret(Used for minor version's) : (^) , tilde(Used for major version's) : (~) ===== auto-upgrade 

npm install react
npm i react
npm i react-dom

npx parcel index.html : here x means execute parcel with the entery file as index.html , and build an devlopment build to host it on the server

npx parcel build index.html : means build an production build to host it on the server

npx parcel index.html --https : for https server

///////////////////////////////



////////////////////////////////

.parcel-cache means space reserved by parcel for its use



Anything which we could re-genrate is been put on git-ignore

browserlist ensure that our app works on the respective version as mentioned

* git init to initalize a git repository

* JSX stands for JavaScript XML. JSX allows us to write HTML in React. JSX makes it easier to write and add HTML in React.

* JSX should not be implemented directly by browsers, but instead requires a compiler to transform it into ECMAScript. This is where Babel comes in.

* To make starting of the application easy using react bundler we have added start : "parcel index.html" in package.json under its scrpts key also now in the terminal we write "npm run start" which earlier use to be "npx parcel index.html"

* npx == npm run , npx parcel index.html

* shortcut : npm run start == npm start

* shortcut : npm run build

* To remove console.log addtional plugin will be needed like  : babel-plugin-transform-remove-console

* We also need to configure this which could be find in the npm page only how to do this ,
 That is make a file using .babelrc and then copy as it is on NPM website

* Each React element should always have a key in it

* React use the help of  diffe algorithm to keep a track of the Keys

* JSX is the replacemnt of react.createElement

* There is also a package.json present in node module

* There are two type of component in javascript : class based and function based component

* Every Componet name starts with a capital letter

* JSX always santizes our application from potencial threats

* Babel(A transpiler/compiler) convert JSX to react.createElement which is an Object which is then react convert it to html to load it on the Dom

* <React.Fragment></React.Fragment> OR <></> is a react component provided by React

* Big websites uses config driven UI

* Optional chaining : ?.

* We keep virtual dom with us for Reconciliation in react , That is to detect change bw actual and virtual dom using diff algorithm we also require a key for that as well 

* We could not provid sylig to a React Fragment

* Config Driven UI : This method is been used for changing the UI on te bases of the backend UI

* Props means passing Arguments to functional component < comp a={"dad"} />  

* Key is not a "Props"

* export default Header;
import Header from './dcsdc';

* export const Title = () => { // Named import 
}
import {Title} from './dcsdc';


// import Header , {Title} from './components/Header'; Here header is default one while Title is normal one
//  import { Title , Header } from './components/Header'; Here Both of them are normale one
// import * as obj from './components/Header' ; // This will import al things 
 
obj.header

* In default export Renaming is possible
* BUt not possible in normale one  

* We put All the static details in the config file/constant file


* To make <input value={} onChange={(e) => changeFunc(e.target.value) }/> tag work in react it is compulsory to have an onChange prop in the tag

* Props name should be same through out the sending and reciving process

* When we write any thing in the search bar(Input Tag) react rerenders the whole componenet this changes need to get refected in the search bar for that we take the help og useState and onChage method

* e.target.value : It gives us the real time change in value of the input feild

* When we need to mantain a variable that changes then in that case we need to make it a react variable that is a useState variable

* what/why is state ?
 When we change a state variable then in that case react would know that the value has changed has thus it need to re-render the changes in that component to refelect the change in the DOM  , while when we change a normale variable no state change takes place hence no re-render is there which result no change 


* what/why is React Hook ?
It is nothing but just a javascript function given to us by react which provid us some functionality

* Microservice arciture results in sepration of concer

* page loads -> call API -> Fill the data ( render the page)

* page loads -> render the page -> API -> Update the UI

* useEffect hook will render after every render is been been finised or when in the value of the argument mentioned in the call back array changes and an empty array means call it just once when the component loads

* A render takes place whenever a state changes or the props associated to a component changes 

* A useEffect default render takes place when all the render are been done 

 // empty dependency array => once after render
 // dep arry [searchText] => once after initial render + everytime after redern (my searchText changes)

 * Shimmer UI is the morden day UI;

 * { Here in this curly bracket we could only write expression and not a statement , a expression is one which boils down to numeric value }

 * never create a component inside another component 

 * We create hooks after functional component and before return . Thats is bewteen them 

 * In Assests folder we keep all the images , while in the components foler we keep all the components and in the constants folder we keep all the static data 
   
 * npm i react-router-dom

 * Hooks start with a use keyword 

 * This is used to get error ,  
  import { useRouteError } from "react-router-dom"; 
const err = useRouteError() ;
consle.log( err.status + " : " + err.statusText)

* client side routing means we are not getting anything from the server instead we have all of it we are just loading it   


* Object.values converts list of object to a array of object
          {Object.values(restaurant?.menu?.items).map((item) => (
            <li key={item.id}>{item.name}</li>
          ))}

 * Array(10).fill("").map((e , i) => (
                <div className="shimmer-card" key={i}>

                </div>
            ))

* consitional rendering is very important when we are not getting notdefined or null , like : 

return  !restaurant?.menu ? (<Shimmer />): (<MainComponent/>)

* formik help us to create form in react

* Modular , resuable , scalble , maintable , testable , clearnerf

* we do not update state directely instaed we take the help of setState in class component and functional component as well

* In class components first constructor is called then render is been called then componentdidmount(After firt render same like that od useEffect with([])) is been called   then componentDidUpdate( fWhen ever either the state changes or the prop changes ) is been called  

* componentDidMount mai API ki Calling hoti hai

* Parent - constructor
  Parent - render
  child - constructor
  child - render
  child - componentDidMount
  parent - componentDidMount 

*Parent Constructor
 Parent render
    First Child constructor
    First Child render
    Second Child constructor
    Second Child render

    DOM UPDATED for children

    first Child componentDidMount
    Second Child componentDid
  Parent componentDidMount

* we could make componentDidMount async but could not make callback function inside useEffect as async 

* If child  componentDidMount is async in nature then parent componetdidmount is been called first then the parent componentDidMount

* Render face -> Commit face

* componentDidUnMount will be called when we go some other page

* 
  useEffect(() => {
    getRestaurantInfo();

    return () => {
      console.log("component will unmount ")
    }
  }, []);

  The above return function will work when we leave that page and perform unmounting 

* Component will unmount is been used for clean-ups

* Utils folder mai hmm loog apne sare functions rakh tai hai jo bhi reusable hote hai 

* modularity means we have broken down code into meaningful pieces

* If one function is present inside one single file then in that case we will use default export 

* Hook is not but just a function 

* 
        const handleOnline = () => {
            setIsOnline(false);
        }

        window.addEventListener('online', handleOnline);

         window.removeEventListener('online', handleOnline)

* Early return should always take place before main return statement

* chuking , code spliting , dynamic bundling , lazy loading , on Demanding loading eg : instamart

* 